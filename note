// 1. Event Listener for DOMContentLoaded
// javascript
// Copy code
// document.addEventListener('DOMContentLoaded', () => {
// This ensures the JavaScript code runs only after the HTML content is fully loaded, preventing errors related to unavailable DOM elements.
// 2. Variable Declarations
// javascript
// Copy code
// const display = document.querySelector(".display");
// const buttons = document.querySelectorAll(".button");
// const result = document.querySelector('.result');

// let currentInput = '';
// let previousInput = '';
// let currentOperator = '';
// display: References the DOM element where the current calculation or result will be shown.
// buttons: Selects all calculator buttons for event handling.
// result: Placeholder reference; appears unused in the code.
// currentInput: Stores the current number being entered by the user.
// previousInput: Stores the previous number (used for calculations).
// currentOperator: Stores the current operator selected (+, -, ×, ÷).
// 3. updateDisplay Function
// javascript
// Copy code
// const updateDisplay = (value) => {
//     display.textContent = value;
// };
// Updates the calculator's display to show the provided value.
// 4. operatorClicked Function
// javascript
// Copy code
// const operatorClicked = (operator) => {
//     if (currentInput === '') return;
//     if (previousInput !== '') {
//         currentInput = calculatedResult(previousInput, currentInput, currentOperator).toString();
//     }
//     previousInput = currentInput;
//     currentOperator = operator;
//     currentInput = '';
//     updateDisplay(previousInput + ' ' + currentOperator);
// };
// Handles operator button clicks:
// Prevents setting an operator if no number is currently entered.
// If a previous number exists, calculates the intermediate result.
// Updates previousInput to the current input (intermediate result).
// Sets the current operator.
// Clears currentInput for the next number.
// Updates the display to show the intermediate result and operator.
// 5. equalToClicked Function
// javascript
// Copy code
// const equalToClicked = () => {
//     if (previousInput && currentInput && currentOperator) {
//         const result = calculatedResult(previousInput, currentInput, currentOperator);
//         updateDisplay(result);
//         currentInput = result;
//         previousInput = '';
//         currentOperator = '';
//     }
// };
// Handles the equal (=) button click:
// Checks if there's a previous number, current number, and operator.
// Calls calculatedResult to compute the final result.
// Updates the display with the result.
// Resets previousInput and currentOperator for new calculations, but keeps currentInput as the result.
// 6. calculatedResult Function
// javascript
// Copy code
// const calculatedResult = (num1, num2, operator) => {
//     num1 = parseFloat(num1);
//     num2 = parseFloat(num2);

//     switch (operator) {
//         case '+': return num1 + num2;
//         case '-': return num1 - num2;
//         case '×': return num1 * num2;
//         case '÷': return num2 === 0 ? 'Error' : num1 / num2;
//         default: return 'Error';
//     }
// };
// Performs arithmetic operations based on the provided operator.
// Converts the inputs to numbers using parseFloat.
// Handles addition, subtraction, multiplication, and division.
// Prevents division by zero by returning 'Error'.
// 7. Event Listener for Buttons
// javascript
// Copy code
// buttons.forEach(button => {
//     button.addEventListener('click', () => {
//         const buttonValue = button.textContent.trim();

//         if (!isNaN(buttonValue)) {
//             currentInput += buttonValue;
//             updateDisplay(previousInput + (currentOperator ? ' ' + currentOperator + ' ' : '') + currentInput);
//         } else if (['+', '-', '×', '÷'].includes(buttonValue)) {
//             operatorClicked(buttonValue);
//         } else if (buttonValue === '=') {
//             equalToClicked();
//         } else if (buttonValue === 'AC') {
//             currentInput = '';
//             previousInput = '';
//             currentOperator = '';
//             updateDisplay('0');
//         } else if (buttonValue === '.') {
//             if (!currentInput.includes('.')) {
//                 currentInput += '.';
//                 updateDisplay(previousInput + (currentOperator ? ' ' + currentOperator + ' ' : '') + currentInput);
//             }
//         }
//     });
// });
// Adds a click event listener to each button:
// Number buttons: Append the number to currentInput and update the display.
// Operator buttons: Call operatorClicked to set the operator.
// Equal button (=): Call equalToClicked to compute the result.
// Clear button (AC): Reset inputs and update the display to 0.
// Decimal point (.): Append it to currentInput if not already present.
// 8. Initialize Display
// javascript
// Copy code
// updateDisplay('0');
// Ensures the calculator display starts at 0 when the page loads.
// Summary:
// This code provides a fully functional calculator, managing input states, performing calculations, and handling edge cases like division by zero. The modular approach using functions ensures reusability and clarity.